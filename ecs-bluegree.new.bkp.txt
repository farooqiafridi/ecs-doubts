#####
# Vpc
#####

module "vpc" {
  source = "../../modules/aws-vpc"

  vpc-location                        = "Virginia"
  namespace                           = "cloudgeeks.ca"
  name                                = "vpc"
  stage                               = "ecs-dev"
  map_public_ip_on_launch             = "true"
  total-nat-gateway-required          = "1"
  create_database_subnet_group        = "true"
  vpc-cidr                            = "10.20.0.0/16"
  vpc-public-subnet-cidr              = ["${var.public-subnet-1}","${var.public-subnet-2}"]
  vpc-private-subnet-cidr             = ["${var.private-subnet-1}","${var.private-subnet-2}"]
  vpc-database_subnets-cidr           = ["10.20.7.0/24", "10.20.8.0/24"]
}

#10.20.1.0/24
#ALB sg
module "alb-sg" {
  source              = "../../modules/aws-sg-cidr"
  namespace           = "cloudgeeks.ca"
  stage               = "dev"
  name                = "ALB"
  tcp_ports           = "${var.fargate-container-port}"
  cidrs               = ["0.0.0.0/0"]
  security_group_name = "${var.alb-sg}"
  vpc_id              = module.vpc.vpc-id
}

# ECS security group
module "ecs-sg" {
  source                  = "../../modules/aws-sg-ref-v2"
  namespace               = "cloudgeeks.ca"
  stage                   = "dev"
  name                    = "ALB-Ref"
  tcp_ports               = "${var.fargate-container-port}"
  ref_security_groups_ids = [module.alb-sg.aws_security_group_default]
  security_group_name     = "${var.ecs-sg}"
  vpc_id                  = module.vpc.vpc-id
}
module "alb" {
  source                  = "../../modules/aws-sg-cidr"
  namespace               = "cloudgeeks.ca"
  stage                   = "dev"
  name                    = "ALB-Ref"
  tcp_ports               = "8080"
  cidrs                   = ["0.0.0.0/0"]

  security_group_name     = "namealb"
  vpc_id                  = module.vpc.vpc-id
}

locals {
  target_groups = [
    "greens",
    "blues",
  ]
}


# Application load balancer

#module "alb" {
  #source = "../../modules/aws-alb"
  #alb-name                   = "${var.alb}"
  #internal                   = "false"
  #alb-sg                     = module.alb-sg.aws_security_group_default
  #alb-subnets                = module.vpc.public-subnet-ids
  #alb-tag                    = "${var.ecs-sg}"
  #enable-deletion-protection = "false"
  # ALB Rules
 # rule-path                  = "/*"
#}
resource "aws_lb" "main" {

  name               = "${var.alb}"
  internal           = false
  load_balancer_type = "application"
  security_groups    = [module.alb-sg.aws_security_group_default, module.alb.aws_security_group_default ,module.ecs-sg.aws_security_group_default ]
  subnets            = module.vpc.public-subnet-ids

  enable_deletion_protection = false
#   access_logs {
#    bucket  = aws_s3_bucket.example.bucket
 #   prefix  = "test-lb"
  #  enabled = true
  #}
}
#Application Load Balancer Target Group


#module "service-alb-tg" {
  #source = "../../modules/aws-alb-tg-type-ip"
  #count = length(local.target_groups)
  #alb-tg-name               = "${var.alb-tg}-${element(local.target_groups, count.index)}"
  #target-group-port         = "${var.fargate-container-port}"
  #target-group-protocol     = var.protocol
  #target-type               = "ip"
  #deregistration_delay      = "1"
  #vpc-id                    = module.vpc.vpc-id
  # Health
 # health-check              = true
 # interval                  = "5"
 # path                      = "/"
 # port                      = "${var.fargate-container-port}"
 # protocol                  = var.protocol
 # timeout                   = "3"
 # unhealthy-threshold       = "3"
 # matcher                   = "200,202"


#}

resource "aws_alb_target_group" "main" {
  count = length(local.target_groups)
  port   = 8080
  name        = "${var.alb-tg}-${element(local.target_groups, count.index)}"
  protocol    = "HTTP"
  vpc_id      = module.vpc.vpc-id
  target_type = "ip"

  health_check {
    healthy_threshold   = "4"
    interval            = "60"
    protocol            = "HTTP"
    matcher             = "200-399"
   # timeout             = "30"
    path                = "/"
    unhealthy_threshold = "2"
  }
}
resource "aws_s3_bucket" "example" {
  bucket = "alb-logs-to-athena"
}

#resource "aws_athena_database" "example" {
 # name   = "alb"
  #bucket = aws_s3_bucket.example.bucket
#}

resource "aws_alb_listener" "http2" {
  load_balancer_arn =  aws_lb.main.id
  port              = 8080
  protocol          = "HTTP"

  default_action {
     target_group_arn = aws_alb_target_group.main[0].arn
     type             = "forward"
  }

}


#  ECS cluster
module "ecs" {
  source                    = "../../modules/aws-ecs"
  name                      = "${var.ecsname}"
  container-insights        = "enabled"
  depends_on                = [aws_lb.main]
}

#cloudwatch


# ECS task defination
module "aws-ecs-task-definition" {
  source                       = "../../modules/aws-ecs-task-definition"
  ecs_task_definition_name     = var.task-definition-name
  task-definition-cpu          = var.task-definition-cpu
  task-definition-memory       = var.task-definition-memory
  cloudwatch-group             = var.cloudwatch-group
  task-role   =  aws_iam_role.ecs_task_role.arn
  exec-role       = aws_iam_role.ecs_task_execution_role.arn
  container-definitions        = <<DEFINITION
  [
    {
      "essential": true,
      "image": "906394416424.dkr.ecr.us-west-2.amazonaws.com/aws-for-fluent-bit:stable",
      "name": "log_router",
      "firelensConfiguration": {
          "type": "fluentbit"
     },
       "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                    "awslogs-group": "firelens-container",
                    "awslogs-region": "us-west-2",
                    "awslogs-create-group": "true",
                    "awslogs-stream-prefix": "firelens"
                }

         },
      "memoryReservation": 50
  },

      {
        "name": "${var.container-name}",
        "image": "${var.repository-uri}",
        "essential": true,
        "portMappings": [
          {
            "containerPort": ${var.fargate-container-port},
            "hostPort": ${var.fargate-container-port}
          }
        ],
        "logConfiguration": {
          "logDriver": "awsfirelens",
          "options": {
              "Name": "es",
              "Port": "9200",
              "Host": "http://3.6.136.70",
              "HTTP_User": "elastic",
              "HTTP_Passwd": "8CpL2shLFqkbHb15f47t",
              "Index": "elastic_firelens",
              "tls": "On",
              "tls.verify": "Off",
              "retry_limit": "2"
          }
      }

      }
]
DEFINITION


}

#ECS task service
resource "aws_ecs_service" "main" {
  name                               = "${var.ecs-service}"
  cluster                            = module.ecs.aws-ecs-cluster-name
  task_definition                    = module.aws-ecs-task-definition.ecs-taks-definitions-arn
  desired_count                      = 2
  deployment_minimum_healthy_percent = 50
  deployment_maximum_percent         = 200
  health_check_grace_period_seconds  = 300
  enable_execute_command             = true
  launch_type                        = "FARGATE"
  scheduling_strategy                = "REPLICA"
  network_configuration {
    security_groups  =  [module.ecs-sg.aws_security_group_default]
    subnets          = module.vpc.private-subnet-ids
    assign_public_ip = false
  }

  force_new_deployment = true
  load_balancer {
    target_group_arn = aws_alb_target_group.main[0].arn
    container_name   = var.container-name
    container_port   = var.fargate-container-port
  }

  deployment_controller {
    type = "CODE_DEPLOY"
  }

  depends_on = [aws_lb.main]
}
/*Code deploy*/
data "aws_iam_policy_document" "assume_by_codedeploy" {
  statement {
    sid     = ""
    effect  = "Allow"
    actions = ["sts:AssumeRole"]

    principals {
      type        = "Service"
      identifiers = ["codedeploy.amazonaws.com"]
    }
  }
}

resource "aws_iam_role" "codedeploy" {
  name               = "codedeploy"
  assume_role_policy = data.aws_iam_policy_document.assume_by_codedeploy.json
}

data "aws_iam_policy_document" "codedeploy" {
  statement {
    sid    = "AllowLoadBalancingAndECSModifications"
    effect = "Allow"

    actions = [
      "ecs:CreateTaskSet",
      "ecs:DeleteTaskSet",
      "ecs:DescribeServices",
      "ecs:UpdateServicePrimaryTaskSet",
      "elasticloadbalancing:DescribeListeners",
      "elasticloadbalancing:DescribeRules",
      "elasticloadbalancing:DescribeTargetGroups",
      "elasticloadbalancing:ModifyListener",
      "elasticloadbalancing:ModifyRule",
      "s3:GetObject",
      "ssmmessages:CreateControlChannel",
      "ssmmessages:CreateDataChannel",
      "ssmmessages:OpenControlChannel",
      "ssmmessages:OpenDataChannel",
    ]

    resources = ["*"]
  }
  statement {
    sid    = "AllowPassRole"
    effect = "Allow"

    actions = ["iam:PassRole"]

    resources = [
      aws_iam_role.ecs_task_execution_role.arn,
      aws_iam_role.ecs_task_role.arn,
    ]
  }
}
############################################

#############################################
resource "aws_iam_role_policy" "codedeploy" {
  role   = aws_iam_role.codedeploy.name
  policy = data.aws_iam_policy_document.codedeploy.json
}

resource "aws_codedeploy_app" "this" {
  compute_platform = "ECS"
  name             = "dev-test-deploy"
}
resource "aws_codedeploy_deployment_group" "this" {
  app_name               = aws_codedeploy_app.this.name
  deployment_group_name  = "example-deploy-group"
  deployment_config_name = "CodeDeployDefault.ECSAllAtOnce"
  service_role_arn       = aws_iam_role.codedeploy.arn

  blue_green_deployment_config {
    deployment_ready_option {
      action_on_timeout = "CONTINUE_DEPLOYMENT"
    }

    terminate_blue_instances_on_deployment_success {
      action = "TERMINATE"
      termination_wait_time_in_minutes = 1
    }
  }

  ecs_service {
    cluster_name = module.ecs.aws-ecs-cluster-name
    service_name = aws_ecs_service.main.name
  }

  deployment_style {
    deployment_option = "WITH_TRAFFIC_CONTROL"
    deployment_type   = "BLUE_GREEN"
  }
  auto_rollback_configuration {
    enabled = true
    events = [ "DEPLOYMENT_FAILURE" ]
  }

  load_balancer_info {
    target_group_pair_info {
      prod_traffic_route {
        listener_arns = ["${aws_alb_listener.http2.arn}"]
      }

      target_group {
        name = aws_alb_target_group.main[0].name
      }

      target_group {
        name = aws_alb_target_group.main[1].name
      }
    }
  }
}


##############################
#roles for SSM and exec
resource "aws_iam_role" "ecs_task_execution_role" {
  name = "${var.environment}-ecsTaskExecutionRole"

  assume_role_policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Principal": {
        "Service": ["ecs-tasks.amazonaws.com" ]
      },
      "Effect": "Allow",
      "Sid": ""
    }
  ]
}
EOF
}

resource "aws_iam_role" "ecs_task_role" {
  name = "${var.environment}-ecsTaskRole"

  assume_role_policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Principal": {
        "Service": ["ecs.amazonaws.com","ecs-tasks.amazonaws.com"]
      },
      "Effect": "Allow",
      "Sid": ""
    }
  ]
}
EOF
}

resource "aws_iam_policy" "secerets" {
  name        = "${var.environment}-task-policy-ssm"
  description = "Policy that allows access to SSM"

  policy = <<EOF
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "ssm:*"
            ],
            "Resource": "*"
        }
    ]
}
EOF
}
resource "aws_iam_role_policy_attachment" "ecs-task-execution-role-policy-attachment" {
  role       = aws_iam_role.ecs_task_execution_role.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
}

resource "aws_iam_role_policy_attachment" "ecs-task-role-policy-attachment" {
  role       = aws_iam_role.ecs_task_role.name
  policy_arn = aws_iam_policy.secerets.arn
}

resource "aws_iam_role_policy_attachment" "ecs-task-role-policy-attachment-for-ssm" {
  role       = aws_iam_role.ecs_task_execution_role.name
  policy_arn = aws_iam_policy.secerets.arn
}